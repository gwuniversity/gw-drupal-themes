{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Person" it would result in "node--type-person". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% set image_uri = node.field_gw_article_featured_media.entity.field_media_image.entity.uri.value %}

{# Image URI #}
{% if image_uri == '/' or image_uri is null %}
  {# {% set article_media = '/' ~ directory ~ '/images/default-article-image.jpg'  %} #}
  {% set article_media = ''  %}
{% else %}
  {% set article_media = file_url(image_uri) %}
{% endif %}

{# Image Alt Text #}
{% set article_media_alt = node.field_gw_article_featured_media.entity.field_media_image.alt %}

{# Image Title #}
{% set article_media_title = node.field_gw_article_featured_media.entity.field_media_image.title %}

{% set classes = [
  'ml-5',
] | sort | join(' ') | trim %}

{% set image_classes = [
  'float-right'
] | sort %}

{% set container_class = container ? 'container' : (container_fluid ? 'container-fluid') %}
{# {% set media_type = node.field_gw_article_featured_media.entity.bundle() %} #}

{% set when = {
  'day': {
    'date': publication_date,
  },
}
%}

<main class="main-content">

  {# Node Content #}
  {% block content %}

    <article{{ (BUILD_TARGET == 'pl') ? ' class=' ~ classes : attributes.addClass(classes) }}>

      {# Title Row #}
      <div class="row">
        <div class="col-12">
          <h1>{{ node.getTitle() }}</h1>
          {% if content.field_gw_article_subtitle %}
            <span class="gw-article-subtitle">{{ content.field_gw_article_subtitle }}</span>
          {% endif %}
        </div>
      </div>
      {# /Title Row #}

      {# Content Row #}
      <div class="row">

        {# 2 columns #}
        <div class="col-md-2">

          <p>
            {% include '@atoms/gw-when/_gw-when.twig' with { when: when, font_awesome: 'fa fa-clock' } %}
          </p>

          {# Currently unused author section #}
          {# {% if article_author %}
            <hr>
            {{ article_author }}
          {% endif %} #}

          {# Social Media Block #}
          <div class="gw-event-social">
            {{ content.addtoany }}
          </div>

        </div>
        {# /2 columns #}

        {# 10 columns #}
        <div class="col-sm-10">

          {# Media Header Image #}
          {% block media_header %}
            {% include '@molecules/gw-media-header/_gw-media-header.twig' with {
              type: 'image',
              image: {
                media_type: 'image',
                variant: 'primary',
                src: article_media,
                alt: article_media_alt,
                title: article_media_title,
              },
              image_classes: image_classes
            } %}
          {% endblock media_header %}

          {# Article Body #}
          {% block article %}
            {% include '@organisms/gw-article/_gw-article.twig' with {
              article_title: node.getTitle(),
              article_subtitle: content.field_gw_article_subtitle,
              article_body: content.field_gw_article_body,
              article_caption: content.field_gw_article_image_caption,
            } %}
          {% endblock article %}

          {# Tags #}
          {% if tags %}
            {% block tags %}
              <br>
              <span class="font-weight-bold">Tags:</span>
              {% include '@molecules/gw-tags/_gw-tags.twig' with { tags: tags } %}
            {% endblock tags %}
          {% endif %}

          {# Related Content #}
          {% if related_content %}
            <hr>
            {% block article_related %}
              {% include '@organisms/gw-related/_gw-related.twig' with { related_content: related_content } %}
            {% endblock article_related %}
          {% endif %}

        </div>
        {# /10 columns #}

      </div>
      {# /Content Row #}

    </article>

  {% endblock content %}
  {# /Node Content #}

</main>
